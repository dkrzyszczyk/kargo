---
- include: set_facts.yml

- name: create temporary resolveconf cloud init file
  command: cp -f /etc/resolv.conf "{{ resolvconffile }}"
  changed_when: false
  when: ansible_os_family == "CoreOS"

- name: Remove search/domain/nameserver options
  lineinfile:
    dest: "{{item[0]}}"
    state: absent
    regexp: "^{{ item[1] }}.*$"
    backup: yes
    follow: yes
  with_nested:
    - "{{ [resolvconffile] + [base|default('')] }}"
    - [ 'search', 'nameserver', 'domain', 'options' ]
  notify: Dnsmasq | update resolvconf

- name: Add search/nameservers to resolv.conf
  blockinfile:
    dest: "{{resolvconffile}}"
    block: |-
      {% for item in [searchentries] + nameserverentries.split(',') -%}
      {{ item }}
      {% endfor %}
    state: present
    insertbefore: BOF
    create: yes
    backup: yes
    follow: yes
    marker: "# Ansible entries {mark}"
  notify: Dnsmasq | update resolvconf
  when: not resolvconf|bool

- name: Add options to resolv.conf
  lineinfile:
    line: options {{ item }}
    dest: "{{resolvconffile}}"
    state: present
    regexp: "^options.*{{ item }}$"
    insertafter: EOF
    backup: yes
    follow: yes
  with_items:
    - ndots:{{ ndots }}
    - timeout:2
    - attempts:2
  notify: Dnsmasq | update resolvconf

- name: get temporary resolveconf cloud init file content
  command: cat {{ resolvconffile }}
  register: cloud_config
  when: ansible_os_family == "CoreOS"

- name: persist resolvconf cloud init file
  template:
    dest: "{{resolveconf_cloud_init_conf}}"
    src: resolvconf.j2
    owner: root
    mode: 0644
  notify: Dnsmasq | update resolvconf for CoreOS
  when: ansible_os_family == "CoreOS"

- include: dhclient-hooks.yml
  when: ansible_os_family != "CoreOS"
